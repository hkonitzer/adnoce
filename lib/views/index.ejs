<!doctype html>
<html>
  <head>
    <title>ADNOCE</title>
    <meta name="viewport" content="width=device-width">    
    <style type="text/css">      
      @font-face {
        font-family: 'DotMatrixRegular';
        src: local('DotMatrixRegular');
        src: url('/fonts/dotmatrx.eot');
        src: url('/fonts/dotmatrx.eot') format('embedded-opentype'),
          url('/fonts/dotmatrx.woff') format('woff'),
          url('/fonts/dotmatrx.ttf') format('truetype'),
          url('/fonts/dotmatrx.svg#DotMatrixRegular') format('svg');        
      }
      body {
        font-family:'DotMatrixRegular',Sans-Serif;
        background-color: black;
        color: #00CC00;
      }
      .green {

      }
      .charts {
        border: solid 0.1em #002e00;        
        width: 47%;
        margin-left: 1em;
        margin-bottom: 1em;
        float: left;
      }
      #log {
        border: solid 0.1em #002e00;        
        width: 50%;       
        min-height: 220px; 
        float: left;
      }
      .loglinecontentbot {
        clear: both;
        font-size: 0.7em;
      }
      .loglinecontent  {
        padding: 0.3em;  
        float: left;
      }
      .loglinecontent.timediff {
        padding-top: 0.6em;
        font-size: 0.8em;
        width: 3.5em;
      }
      .loglinecontent.sid {
        width: 4.2em;
      }
      .loglinecontent.counter {
        text-align: center;
        width: 2em;
      }
      .logline.datastore {
        width: 2em;
      }
      .logline {
        display: table;
        clear: both;
      }
      .chart rect {
        fill: steelblue;
        stroke: white;
      }

    </style>
    <script src="<%=cdnurl%>/js/jquery-1.9.1.min.js"></script>
    <script src="<%=cdnurl%>/js/moment.min.js"></script>
    <script src="<%=cdnurl%>/js/d3.v3.min.js"></script>    
    <script src="/socket.io/socket.io.js"></script>   
  </head>
  <body>
    <div>Server: <span id="serverstatus"></span></div>
    <div>Req/Min:&thinsp;<span id="rpm">?</span>&thinsp;Trend:&thinsp;<span id="rpmtrend">?</span>&thinsp;Max:&thinsp;<span id="rpmmax">0</span></div>
    <div>Req/Hour:&thinsp;<span id="rph">?</span>&thinsp;Trend:&thinsp;<span id="rphtrend">?</span>&thinsp;Max:&thinsp;<span id="rphmax">0</span></div>
    <div>Events recieved: <span id="eventtype_1">Views: <span id="eventtypecontent_1">0</span></span></div>
    <div id="log"></div>
    <div id="chart_rpm" class="charts"></div>
    <div id="chart_rph" class="charts"></div>

    <script>
    <% // Socket IO Handling %>
    var trackingDataIO = io.connect();
    trackingDataIO.on('connect', function () {      
      $('#serverstatus').text('connected');      
    });
    trackingDataIO.on('disconnect', function () {      
      $('#serverstatus').text('disconnected');
    });
    <% // Utilites %>
    var normalizeSessionIdRegEx = /[^\w]/g;
    var normalizeSessionId = function(sessionId) {
      return sessionId.replace(normalizeSessionIdRegEx,'').substring(0,6);      
    }
    var normalizeURLRegEx = new RegExp(/^(http|ftp|https):\/\/(.*)\/(.*)/);
    var normalizeURL = function(url) {      
      var erg = normalizeURLRegEx.exec(url);      
      return { protocol : erg[1], host: erg[2], path: '/'+erg[3] };
    }
    <%// Configuration %>
    var EVENTTYPENAMES = { 1 : 'Views: ' };
    var recievedEventTypes = { };
    for (var e in EVENTTYPENAMES) {
      recievedEventTypes[e] = 0;
    }
    var SHOWDATALOGLINE = true, MAXLOGLINES = 20;
    if (location.search.length > 0) {
      var params = location.search.substring(1).split('&');
      for (var p = 0, pmax = params.length; p < pmax; ++p) {
        var param = params[p].split('=');
        switch (param[0]) {
          case 'datalogline':
            if (param[1] === 'false') SHOWDATALOGLINE = false;            
            break;
          case 'maxloglines':
            var max = parseInt(param[1], 10);
            if (!isNaN(max)) MAXLOGLINES = max;            
            break;
        }        
      }      
    }
    var lastLoglineTimestamp = moment();
    
    <%// Websocket Event Handler %>
    trackingDataIO.on('trackingdata', function (data) {      
      recievedEventTypes[data.adnocetype]++;
      $('#eventtypecontent_'+data.adnocetype).text(recievedEventTypes[data.adnocetype]);
      if ($('.logline').length >= MAXLOGLINES) $('.logline:first').remove();
      var sid = data.persistentSessionId || data.sessionId;
      var sid = normalizeSessionId(sid);      
      var loglinediv = $('<div>', {'class' : 'logline '+sid, style: 'display: none;'});      

      reqPerMinuteStore.c++; 
      reqPerHourStore.c++;  
      var ts = moment(new Date(data.timestamp));      
      var diff = ts.diff(lastLoglineTimestamp);
      if (diff <= 1000) difftext = diff+'ms';
      else {        
        diff = Math.round(diff / 1000);
        if (diff <= 60) difftext = diff+'s';          
        else {          
          diff = Math.round(diff / 60);
          if (diff <= 60) difftext = diff+'m';
          else {
            diff = Math.round(diff / 60);
          if (diff <= 60) difftext = diff+'h';
          }
        }
      }
      lastLoglineTimestamp = ts; 
      loglinediv.append('<div class="loglinecontent timediff">'+difftext+'</div>');
      loglinediv.append('<div class="loglinecontent timestamp">'+ts.format('H:mm:ss.SSS')+'</div>');
      var ua = data.userAgent || 'n/a';
      loglinediv.append('<div class="loglinecontent sid" title="'+ua+'">'+sid+'</div>');
      var counterDiv = $('<div>', {'class' : 'loglinecontent counter'});
      loglinediv.append(counterDiv);      
      var urlObj = normalizeURL(data.url); 
      loglinediv.append('<div class="loglinecontent url" title="'+urlObj.host+'">'+urlObj.path+'</div>'); 
      
      var dataloglineDiv = $('<div>', {'class' : 'loglinecontentbot'});
      if (data.persistentSessionId) {       
        var oldsid = normalizeSessionId(data.sessionId);
        var oldElem = $('.'+oldsid);
        if (oldElem.length > 0) {
          oldElem.find('div.sid').text(sid);
          oldElem.removeClass(oldsid).addClass(sid);          
        }              
      }

      if (data.data && data.data.length > 0) {
        for (var d = 0, dmax = data.data.length; d < dmax; ++d) {                    
          if (data.data[d].key === 'views') {
            counterDiv.text(data.data[d].value);
            if (!SHOWDATALOGLINE) break; else continue;
          }
          if (!SHOWDATALOGLINE) continue;          
          dataloglineDiv.append('<div class="loglinecontent datastore '+data.data[d].key+'">'+data.data[d].key+':'+data.data[d].value+'</div>');      
        }
      }
      if (SHOWDATALOGLINE) loglinediv.append(dataloglineDiv);
      $('#log').append(loglinediv);
      loglinediv.fadeIn('slow');            
    });
    <%// Perfomance Calc %>
    var reqPerMinuteStore = {c : 0, max : 0}
    var reqPerHourStore = {c : 0, max : 0}
    var resetReqPerMinuteStore = function() {      
      if (reqPerMinuteStore.c > reqPerMinuteStore.max) {
        reqPerMinuteStore.max = reqPerMinuteStore.c;
        $('#rpmmax').text(reqPerMinuteStore.max);
        $('#rpmmax').attr('title', moment().format('H:mm:ss'));
        $('#rpmtrend').text("+");
      } else if (reqPerMinuteStore.c === reqPerMinuteStore.max) {
        $('#rpmtrend').text("=");
      } else {
        $('#rpmtrend').text("-");
      }
      $('#rpm').text(reqPerMinuteStore.c);
                  
      rpmChart.addValue(reqPerMinuteStore.c);
      rpmChart.redraw();
      reqPerMinuteStore.c = 0;

    }
    var resetReqPerHourStore = function() {      
      if (reqPerHourStore.c > reqPerHourStore.max) {
        reqPerHourStore.max = reqPerHourStore.c;
        $('#rphmax').text(reqPerHourStore.max);
        $('#rphmax').attr('title', moment().format('H:mm:ss'));
        $('#rphtrend').text("+");
      } else if (reqPerHourStore.c === reqPerHourStore.max) {
        $('#rphtrend').text("=");
      } else {
        $('#rphtrend').text("-");
      }
      $('#rph').text(reqPerHourStore.c);
      reqPerHourStore.c = 0;
    }
    window.setInterval(resetReqPerMinuteStore, 60000);
    window.setInterval(resetReqPerHourStore, 3600000);



    var RPHChart = function(opts, data_) {
      var chart = null;
      var data = data;

      var x = d3.scale.linear()
          .domain([0, 1])
          .range([0, opts.width]);

      var y = d3.scale.linear()
          .domain([0, 100])
          .rangeRound([0, opts.height]);
          
      this.addValue = function(c) {
        if (data) {
          data.shift();
          data.push({ time: (data[data.length-1].time)+1, value: c});      
        }
      }
      this.redraw = function(data_) {
        if (data_) setData(data_);
        var rect = chart.selectAll("rect")
          .data(data, function(d) { return d.time; });
        rect.enter().insert("rect", "line")
            .attr("x", function(d, i) { return x(i + 1) - .5; })
            .attr("y", function(d) { return opts.height - y(d.value) - .5; })
            .attr("width", opts.width)
            .attr("height", function(d) { return y(d.value); })
          .transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i) - .5; });

        rect.transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i) - .5; });

        rect.exit().transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i - 1) - .5; })
            .remove();
      }

      this.create = function(data_) {   
        if (data_) setData(data_);     
        chart = d3.select("#chart_rph").append("svg")
          .attr("class", "chart")
          .attr("width", opts.width * data.length - 1)
          .attr("height", opts.height);
        chart.selectAll("rect")
          .data(data)
        .enter().append("rect")
          .attr("x", function(d, i) { return x(i) - .5; })
          .attr("y", function(d) { return opts.height - y(d.value) - .5; })
          .attr("width", opts.width)
          .attr("height", function(d) { return y(d.value); });

        chart.append("line")
          .attr("x1", 0)
          .attr("x2", opts.width * data.length)
          .attr("y1", opts.height - .5)
          .attr("y2", opts.height - .5)
          .style("stroke", "#000");
        chart.append("svg:text")
          .attr("x", 50 / 2)
          .attr("y", 35 )       
          .style("fill", "#00CC00") 
          .text("Requests per hour"); 
      }
      this.getData = function() {
        return data;
      }
      var setData = function(data_) {
        data = data_;
      }
      this.setData = setData;
    }
    var RPMChart = function(opts, data) {
      var chart = null;
      var data = data;

      var x = d3.scale.linear()
          .domain([0, 1])
          .range([0, opts.width]);

      var y = d3.scale.linear()
          .domain([0, 100])
          .rangeRound([0, opts.height]);
          
      this.addValue = function(c) {
        if (data) {
          data.shift();
          data.push({ time: (data[data.length-1].time)+1, value: c});      
        }
      }
      this.redraw = function(data_) {
        if (data_) setData(data_);
        var rect = chart.selectAll("rect")
          .data(data, function(d) { return d.time; });
        rect.enter().insert("rect", "line")
            .attr("x", function(d, i) { return x(i + 1) - .5; })
            .attr("y", function(d) { return opts.height - y(d.value) - .5; })
            .attr("width", opts.width)
            .attr("height", function(d) { return y(d.value); })
          .transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i) - .5; });

        rect.transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i) - .5; });

        rect.exit().transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i - 1) - .5; })
            .remove();
      }

      this.create = function(data_) {     
        if (data_) setData(data_);   
        chart = d3.select("#chart_rpm").append("svg")
          .attr("class", "chart")
          .attr("width", opts.width * data.length - 1)
          .attr("height", opts.height);
        chart.selectAll("rect")
          .data(data)
        .enter().append("rect")
          .attr("x", function(d, i) { return x(i) - .5; })
          .attr("y", function(d) { return opts.height - y(d.value) - .5; })
          .attr("width", opts.width)
          .attr("height", function(d) { return y(d.value); });

        chart.append("line")
          .attr("x1", 0)
          .attr("x2", opts.width * data.length)
          .attr("y1", opts.height - .5)
          .attr("y2", opts.height - .5)
          .style("stroke", "#000");
        chart.append("svg:text")
          .attr("x", 50 / 2)
          .attr("y", 35 )       
          .style("fill", "#00CC00") 
          .text("Requests per minute"); 
      }
      this.getData = function() {
        return data;
      }
      var setData = function(data_) {
        data = data_;
      }
      this.setData = setData;
    }

    var rpmChart = new RPMChart({ width: Math.round(($('#chart_rpm').width()-30)/60), height: 180});
    var rphChart = new RPHChart({ width: Math.round(($('#chart_rph').width()-30)/24), height: 180});
    var now =  moment();  
    $.getJSON('/api/db/AdnoceVisit', {'timestamp' : {'$gte' : moment().startOf('hour').utc().valueOf() }, 'sort' : {'timestamp' : 1}}).success(function(rd){
      var initalRPMdata = [];
      for (var i = 0, ix = 60; i < ix; ++i) {
        initalRPMdata[i] = { time: i, value: 0 }
      }
      for (var d in rd.data) {
        var min = moment(rd.data[d].timestamp).minute();
        initalRPMdata[min].value++;
      }
      var currentMinute = now.minute();  
      var fillNew = 60 - currentMinute;    
      var testy1 = initalRPMdata.slice(0, currentMinute), testy2 = [];    
      for (var i =  -60, ix = -currentMinute; i < ix; ++i) {      
        testy2.push({ time: i, value: 0 });
      }     
      initalRPMdata = testy2.reverse().concat(testy1);          
      rpmChart.create(initalRPMdata);
    });
    $.getJSON('/api/db/AdnoceVisit', {'timestamp' : {'$gte' : moment().startOf('day').utc().valueOf() }, 'sort' : {'timestamp' : 1}}).success(function(rd){
      var initalRPHdata = [];
      for (var i = 0, ix = 23; i <= ix; ++i) {
        initalRPHdata[i] = { time: i, value: 0 }
      }
      for (var d in rd.data) {
        var h = moment(rd.data[d].timestamp).hour();
        initalRPHdata[h].value++;
      }
      var currentHour = now.hour();      
      var fillNew = 24 - currentHour;    
      var testy1 = initalRPHdata.slice(0, currentHour), testy2 = [];    
      for (var i =  -24, ix = -currentHour; i < ix; ++i) {      
        testy2.push({ time: i, value: 0 });
      }     
      initalRPHdata = testy2.reverse().concat(testy1);          
      rphChart.create(initalRPHdata);
    });


  </script>
  </body>
</html>
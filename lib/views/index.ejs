<!doctype html>
<html>
  <head>
    <title>ADNOCE</title>
    <meta name="viewport" content="width=device-width">
    <script src="<%=cdnurl%>/jquery-1.9.1.min.js"></script>    
    <script src="/socket.io/socket.io.js"></script>    
    <style type="text/css">
      
      @font-face {
        font-family: 'DotMatrixRegular';
        src: local('DotMatrixRegular');
        src: url('/fonts/dotmatrx.eot');
        src: url('/fonts/dotmatrx.eot') format('embedded-opentype'),
          url('/fonts/dotmatrx.woff') format('woff'),
          url('/fonts/dotmatrx.ttf') format('truetype'),
          url('/fonts/dotmatrx.svg#DotMatrixRegular') format('svg');        
      }
      body {
        font-family:'DotMatrixRegular',Sans-Serif;
        background-color: black;
        color: #00CC00;        
      }
      #log {
        /*border: solid 0.2em #002e00;*/
      }
      .loglinecontentbot {
        clear: both;
        font-size: 0.7em;
      }
      .loglinecontent  {
        padding: 0.2em;  
        float: left;
      }
      .loglinecontent.timediff {
        width: 2em;
      }
      .loglinecontent.sid {
        width: 4.2em;
      }
      .loglinecontent.counter {
        text-align: center;
        width: 1.2em;
      }
      .logline.datastore {
        width: 2em;
      }
      .logline {
        clear: both;
      }
    </style>
  </head>
  <body>
    <div>Server: <span id="serverstatus"></span></div>
    <div>Events recieved: <span id="eventtype_1">Views: <span id="eventtypecontent_1">0</span></span></div>
    <div id="log">
    </div>
    <script>
    <% // Socket IO Handling %>
    var trackingDataIO = io.connect();
    trackingDataIO.on('connect', function () {      
      $('#serverstatus').text('connected');      
    });
    trackingDataIO.on('disconnect', function () {      
      $('#serverstatus').text('disconnected');
    });
    <% // Utilites %>
    var normalizeSessionIdRegEx = /[^\w]/g;
    var normalizeSessionId = function(sessionId) {
      return sessionId.replace(normalizeSessionIdRegEx,'').substring(0,6);      
    }
    var normalizeURLRegEx = new RegExp(/^(http|ftp|https):\/\/(.*)\/(.*)/);
    var normalizeURL = function(url) {      
      var erg = normalizeURLRegEx.exec(url);      
      return { protocol : erg[1], host: erg[2], path: '/'+erg[3] };
    }
    <%// Configuration %>
    var EVENTTYPENAMES = { 1 : 'Views: ' };
    var recievedEventTypes = { };
    for (var e in EVENTTYPENAMES) {
      recievedEventTypes[e] = 0;
    }
    var SHOWDATALOGLINE = true, MAXLOGLINES = 20;
    if (location.search.length > 0) {
      var params = location.search.substring(1).split('&');
      for (var p = 0, pmax = params.length; p < pmax; ++p) {
        var param = params[p].split('=');
        switch (param[0]) {
          case 'datalogline':
            if (param[1] === 'false') SHOWDATALOGLINE = false;            
            break;
          case 'maxloglines':
            var max = parseInt(param[1], 10);
            if (!isNaN(max)) MAXLOGLINES = max;            
            break;
        }        
      }      
    }
    var lastLoglineTimestamp = -1;
    <%// Websocket Event Handler %>
    trackingDataIO.on('trackingdata', function (data) {      
      recievedEventTypes[data.adnocetype]++;
      $('#eventtypecontent_'+data.adnocetype).text(recievedEventTypes[data.adnocetype]);
      if ($('.logline').length >= MAXLOGLINES) $('.logline:first').remove();
      var sid = data.persistentSessionId || data.sessionId;

      var sid = normalizeSessionId(sid);
      var loglinediv = $('<div>', {'class' : 'logline '+sid});
      diff = 0;

      // @TODO: Time Diff
      loglinediv.append('<div class="loglinecontent timediff">'+diff+'</div>');
      loglinediv.append('<div class="loglinecontent timestamp">'+data.timestamp+'</div>');
      var ua = data.userAgent || 'n/a';
      loglinediv.append('<div class="loglinecontent sid" title="'+ua+'">'+sid+'</div>');
      var counterDiv = $('<div>', {'class' : 'loglinecontent counter'});
      loglinediv.append(counterDiv);      
      var urlObj = normalizeURL(data.url); 
      loglinediv.append('<div class="loglinecontent url" title="'+urlObj.host+'">'+urlObj.path+'</div>'); 
      
      var dataloglineDiv = $('<div>', {'class' : 'loglinecontentbot'});
      if (data.persistentSessionId) {       
        var oldsid = normalizeSessionId(data.sessionId);
        var oldElem = $('.'+oldsid);
        if (oldElem.length > 0) {
          oldElem.find('div.sid').text(sid);
          oldElem.removeClass(oldsid).addClass(sid);          
        }              
      }

      if (data.data && data.data.length > 0) {
        for (var d = 0, dmax = data.data.length; d < dmax; ++d) {                    
          if (data.data[d].key === 'views') {
            counterDiv.text(data.data[d].value);
            if (!SHOWDATALOGLINE) break; else continue;
          }
          if (!SHOWDATALOGLINE) continue;          
          dataloglineDiv.append('<div class="loglinecontent datastore '+data.data[d].key+'">'+data.data[d].key+':'+data.data[d].value+'</div>');      
        }
      }
      if (SHOWDATALOGLINE) loglinediv.append(dataloglineDiv);
      $('#log').append(loglinediv);
    });
  </script>
  </body>
</html>
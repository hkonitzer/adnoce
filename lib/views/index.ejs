<!doctype html>
<html>
  <head>
    <title>ADNOCE</title>
    <meta name="viewport" content="width=device-width">    
    <style type="text/css"></style>
    <link href="/css/main.css" rel="stylesheet" type="text/css" media="screen"> 
    <script src="<%=cdnurl%>/js/libs/jquery-1.9.1.min.js"></script>
    <script src="<%=cdnurl%>/js/libs/moment.min.js"></script>
    <script src="<%=cdnurl%>/js/libs/d3.v3.min.js"></script>    
    <script src="<%=cdnurl%>/js/libs/underscore-min.js"></script>
    <script src="<%=cdnurl%>/js/libs/backbone-min.js"></script>
    <script src="/js/main.js"></script>
    <script src="/socket.io/socket.io.js"></script>   
  </head>
  <body>
    <div id="server">
      <div style="float:left;">Server: <span id="serverstatus"></span></div>
      <span style="float:left;">&nbsp;&mdash;&nbsp;</span>
      <div style="float:left;">Events recieved: <span id="eventtype_1">Views: <span id="eventtypecontent_1">0</span></span></div>
    </div>
    <div style="clear:both;"</div>
    <div id="perf">
      <div id="perf_rpm" style="float:left;"></div>
      <span style="float:left;">&nbsp;&mdash;&nbsp;</span>
      <div id="perf_rph" style="float:left;"></div>   
    </div>
    <div style="clear:both;"</div>    
    <div id="log"></div>
    <div id="chart_rpm" class="charts"></div>
    <div id="chart_rph" class="charts"></div>

    <script>
    <% // Socket IO Handling %>
    var trackingDataIO = io.connect();
    trackingDataIO.on('connect', function () {      
      $('#serverstatus').text('connected');      
    });
    trackingDataIO.on('disconnect', function () {      
      $('#serverstatus').text('disconnected');
    });
    
    <%// Configuration %>
    var EVENTTYPENAMES = { 1 : 'Views: ' };
    var recievedEventTypes = { };
    for (var e in EVENTTYPENAMES) {
      recievedEventTypes[e] = 0;
    }
    var SHOWDATALOGLINE = true, MAXLOGLINES = 20;
    if (location.search.length > 0) {
      var params = location.search.substring(1).split('&');
      for (var p = 0, pmax = params.length; p < pmax; ++p) {
        var param = params[p].split('=');
        switch (param[0]) {
          case 'datalogline':
            if (param[1] === 'false') SHOWDATALOGLINE = false;            
            break;
          case 'maxloglines':
            var max = parseInt(param[1], 10);
            if (!isNaN(max)) MAXLOGLINES = max;            
            break;
        }        
      }      
    }
    <% // Init Backbone Models & Views for log %>
    var LogLines = new LogLineList([], {maxEntries: MAXLOGLINES});    
    var Log = new LogView({model: LogLines, el: $("#log"), showdatalogline: SHOWDATALOGLINE});

    <%// Websocket Event Handler %>
    trackingDataIO.on('trackingdata', function (data) { 
      var logEntry = new LogLine(data);
      LogLines.add(logEntry);   
      recievedEventTypes[data.adnocetype]++;
      $('#eventtypecontent_'+data.adnocetype).text(recievedEventTypes[data.adnocetype]);      
      ReqPerMinuteStore.addRequest();
      ReqPerHourStore.addRequest();      
    });

    <%// Perfomance Calc %>    
    var ReqPerMinuteStore = new PerfomanceModel;
    var rpmPerformance = new PerformanceView({model: ReqPerMinuteStore, el: $("#perf_rpm"), title: 'Req/Min'});
    window.setInterval(function() { 
      ReqPerMinuteStore.reset(); 
      rpmChart.addValue(reqPerMinuteStore.c);
      rpmChart.redraw();    
    }, 60000);
    var ReqPerHourStore = new PerfomanceModel;
    var rphPerformance = new PerformanceView({model: ReqPerHourStore, el: $("#perf_rph"), title: 'Req/Hour'});
    window.setInterval(function() { ReqPerHourStore.reset(); }, 3600000);
    

    var RPHChart = function(opts, data_) {       
      var data = data;

      var x = d3.scale.linear()
          .domain([0, 1])
          .range([0, opts.width]);

      var y = d3.scale.linear()
          .domain([0, 100])
          .rangeRound([0, opts.height]);
          

      var chart = d3.select("#chart_rph").append("svg")
          .attr("class", "chart");

      this.addValue = function(c) {
        if (data) {
          data.shift();
          data.push({ time: (data[data.length-1].time)+1, value: c});      
        }
      }
      this.redraw = function(data_) {
        if (data_) setData(data_);
        var rect = chart.selectAll("rect")
          .data(data, function(d) { return d.time; });
        rect.enter().insert("rect", "line")
            .attr("x", function(d, i) { return x(i + 1) - .5; })
            .attr("y", function(d) { return opts.height - y(d.value) - .5; })
            .attr("width", opts.width)
            .attr("height", function(d) { return y(d.value); })
          .transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i) - .5; });

        rect.transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i) - .5; });

        rect.exit().transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i - 1) - .5; })
            .remove();
      }

      this.create = function(data_) {   
        if (data_) setData(data_);  
        chart.attr("width", opts.width * data.length - 1)
          .attr("height", opts.height);           
        chart.selectAll("rect")
          .data(data)
        .enter().append("rect")
          .attr("x", function(d, i) { return x(i) - .5; })
          .attr("y", function(d) { return opts.height - y(d.value) - .5; })
          .attr("width", opts.width)
          .attr("height", function(d) { return y(d.value); });

        chart.append("line")
          .attr("x1", 0)
          .attr("x2", opts.width * data.length)
          .attr("y1", opts.height - .5)
          .attr("y2", opts.height - .5)
          .style("stroke", "#000");
        chart.append("svg:text")
          .attr("x", 50 / 2)
          .attr("y", 35 )       
          .style("fill", "#00CC00") 
          .text("Requests per hour"); 
      }
      this.getData = function() {
        return data;
      }
      var setData = function(data_) {
        data = data_;
      }
      this.setData = setData;
    }
    var RPMChart = function(opts, data) {
  
      var data = data;

      var x = d3.scale.linear()
          .domain([0, 1])
          .range([0, opts.width]);

      var y = d3.scale.linear()
          .domain([0, 100])
          .rangeRound([0, opts.height]);

      var chart = d3.select("#chart_rpm").append("svg")
          .attr("class", "chart");
          
      this.addValue = function(c) {
        if (data) {
          data.shift();
          data.push({ time: (data[data.length-1].time)+1, value: c});      
        }
      }
      this.redraw = function(data_) {
        if (data_) setData(data_);
        var rect = chart.selectAll("rect")
          .data(data, function(d) { return d.time; });
        rect.enter().insert("rect", "line")
            .attr("x", function(d, i) { return x(i + 1) - .5; })
            .attr("y", function(d) { return opts.height - y(d.value) - .5; })
            .attr("width", opts.width)
            .attr("height", function(d) { return y(d.value); })
          .transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i) - .5; });

        rect.transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i) - .5; });

        rect.exit().transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i - 1) - .5; })
            .remove();
      }

      this.create = function(data_) {     
        if (data_) setData(data_);   
        chart = chart.attr("width", opts.width * data.length - 1)
          .attr("height", opts.height);
        chart.selectAll("rect")
          .data(data)
        .enter().append("rect")
          .attr("x", function(d, i) { return x(i) - .5; })
          .attr("y", function(d) { return opts.height - y(d.value) - .5; })
          .attr("width", opts.width)
          .attr("height", function(d) { return y(d.value); });

        chart.append("line")
          .attr("x1", 0)
          .attr("x2", opts.width * data.length)
          .attr("y1", opts.height - .5)
          .attr("y2", opts.height - .5)
          .style("stroke", "#000");
        chart.append("svg:text")
          .attr("x", 50 / 2)
          .attr("y", 35 )       
          .style("fill", "#00CC00") 
          .text("Requests per minute"); 
      }
      this.getData = function() {
        return data;
      }
      var setData = function(data_) {
        data = data_;
      }
      this.setData = setData;
    }

    var rpmChart = new RPMChart({ width: Math.round(($('#chart_rpm').width()-30)/60), height: 180});
    var rphChart = new RPHChart({ width: Math.round(($('#chart_rph').width()-30)/24), height: 180});
    var now =  moment();  
    $.getJSON('/api/db/AdnoceVisit', {'timestamp' : {'$gte' : moment().startOf('hour').utc().valueOf() }, 'sort' : {'timestamp' : 1}}).success(function(rd){
      var initalRPMdata = [];
      for (var i = 0, ix = 60; i < ix; ++i) {
        initalRPMdata[i] = { time: i, value: 0 }
      }
      for (var d in rd.data) {
        var min = moment(rd.data[d].timestamp).minute();
        initalRPMdata[min].value++;
      }
      var currentMinute = now.minute();  
      var fillNew = 60 - currentMinute;    
      var testy1 = initalRPMdata.slice(0, currentMinute), testy2 = [];    
      for (var i =  -60, ix = -currentMinute; i < ix; ++i) {      
        testy2.push({ time: i, value: 0 });
      }     
      initalRPMdata = testy2.reverse().concat(testy1);          
      rpmChart.create(initalRPMdata);
    });
    $.getJSON('/api/db/AdnoceVisit', {'timestamp' : {'$gte' : moment().startOf('day').utc().valueOf() }, 'sort' : {'timestamp' : 1}}).success(function(rd){
      var initalRPHdata = [];
      for (var i = 0, ix = 23; i <= ix; ++i) {
        initalRPHdata[i] = { time: i, value: 0 }
      }
      for (var d in rd.data) {
        var h = moment(rd.data[d].timestamp).hour();
        initalRPHdata[h].value++;
      }
      var currentHour = now.hour();      
      var fillNew = 24 - currentHour;    
      var testy1 = initalRPHdata.slice(0, currentHour), testy2 = [];    
      for (var i =  -24, ix = -currentHour; i < ix; ++i) {      
        testy2.push({ time: i, value: 0 });
      }     
      initalRPHdata = testy2.reverse().concat(testy1);          
      rphChart.create(initalRPHdata);
    });


  </script>
  </body>
</html>
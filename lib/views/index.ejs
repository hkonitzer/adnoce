<!doctype html>
<html>
  <head>
    <title>ADNOCE</title>
    <meta name="viewport" content="width=device-width">    
    <link href="/css/main.css" rel="stylesheet" type="text/css"> 
    <% if (typeof(retrolook) === 'boolean' && retrolook === true) { %>
    <link href="/css/fonts.css" rel="stylesheet" type="text/css" media="screen"> 
    <% } %>
    <script src="<%=cdnurl%>/js/libs/jquery-1.9.1.min.js"></script>
    <script src="<%=cdnurl%>/js/libs/moment.min.js"></script>
    <script src="<%=cdnurl%>/js/libs/d3.v3.min.js"></script>    
    <script src="<%=cdnurl%>/js/libs/underscore-min.js"></script>
    <script src="<%=cdnurl%>/js/libs/backbone-min.js"></script>
    <script src="/js/main.js"></script>
    <script src="/socket.io/socket.io.js"></script>   
  </head>
  <body>
    <div id="server">
      <div class="borpad grbor" style="float:left;">
        <span>Server: <span id="serverstatus"></span></span>
        <span title="Server Uptime in hours">Up: <span id="serveruptime">?</span></span>
        <span title="5min / 15min average load">Load: <span id="serverload">?</span></span>
        <span title="Used memory">Mem: <span id="servermemory">?</span></span>
      </div>      
      <div style="float:left;" class="borpad grbor">
        <span>Data recieved:&nbsp;</span>
        <span id="eventtype_1">Views: <span id="eventtypecontent_1">0</span></span>
        <span id="eventtype_100">Errors: <span id="eventtypecontent_100">0</span></span>
        <span id="eventtype_200">Events: <span id="eventtypecontent_200">0</span></span>
      </div>
    </div>
    <div style="clear:both;"></div>
    <div id="perf">
      <div class="borpad grbor" id="perf_rpm" style="float:left;"></div>      
      <div class="borpad grbor" id="perf_rph" style="float:left;"></div>      
      <div class="borpad grbor" id="perf_eph" style="float:left;"></div>     
    </div>
    <div style="clear:both;"></div>    
    <div id="log" class="grbor"></div>
    <div id="chart_rpm" class="grbor charts"><span>Loading...</span></div>
    <div id="chart_rph" class="grbor charts"><span>Loading...</span></div>
    <div id="chart_eph" class="grbor charts"><span>Loading...</span></div>
    <div id="chart_fph" class="grbor charts"><span>Loading...</span></div>

    <script>

    <% // Socket IO Handling %>
    var trackingDataIO = io.connect();
    trackingDataIO.on('connect', function () {      
      $('#serverstatus').text('connected');      
    });
    trackingDataIO.on('disconnect', function () {      
      $('#serverstatus').text('disconnected');
    });
    trackingDataIO.socket.on('error', function (reason) {      
      $('#serverstatus').text('error: '+reason);
    });
    
    <%// Configuration %>
    var EVENTTYPENAMES = { 1 : 'Views: ', 100: 'Errors', 200 : 'Events' };
    var recievedEventTypes = { };
    for (var e in EVENTTYPENAMES) {
      recievedEventTypes[e] = 0;
    }
    var SHOWDATALOGLINE = true, MAXLOGLINES = null;
    if (location.search.length > 0) {
      var params = location.search.substring(1).split('&');
      for (var p = 0, pmax = params.length; p < pmax; ++p) {
        var param = params[p].split('=');
        switch (param[0]) {
          case 'datalogline':
            if (param[1] === 'false') {
              SHOWDATALOGLINE = false;   
            }
            break;
          case 'maxloglines':
            var max = parseInt(param[1], 10);
            if (!isNaN(max)) MAXLOGLINES = max;            
            break;
        }        
      }      
    }
    <% // Init Backbone Models & Views for log %>
    var LogLines = new LogLineList([]);    
    var Log = new LogView({model: LogLines, el: $("#log"), showMaxEntries: MAXLOGLINES, showDatalogline: SHOWDATALOGLINE});

    <%// Websocket Event Handler %>
    trackingDataIO.on('trackingdata', function (data) {
      var logEntry = new LogLine(data);
      LogLines.add(logEntry);
      recievedEventTypes[data.adnocetype]++;
      $('#eventtypecontent_'+data.adnocetype).text(recievedEventTypes[data.adnocetype]);
      switch (data.adnocetype) {
        case 200:
          EvePerHourStore.addRequest();
          break;
        default:
          ReqPerMinuteStore.addRequest();
          ReqPerHourStore.addRequest();        
      }
      
    });
    trackingDataIO.on('health', function (data) {      
      $('#serveruptime').text(Math.round((data.uptime/60)/60)+'h');
      var usedMemory = 100 - Math.round(((data.memory.free*100) / data.memory.total));      
      $('#servermemory').text(usedMemory+'%');
      $('#serverload').text(Math.round(data.load[1])+'% / '+Math.round(data.load[2])+'%');      
    });

    <%// Perfomance Calc %>        

    var ReqPerMinuteStore = new PerfomanceModel;
    var rpmPerformance = new PerformanceView({model: ReqPerMinuteStore, el: $("#perf_rpm"), title: 'Req/Min'});
    window.setInterval(function() {       
      rpmChart.addValue(ReqPerMinuteStore.get('reqcounter'));
      rpmChart.redraw();    
      ReqPerMinuteStore.reset(); 
    }, 60000);

    var ReqPerHourStore = new PerfomanceModel;
    var rphPerformance = new PerformanceView({model: ReqPerHourStore, el: $("#perf_rph"), title: 'Req/Hour'});
    var updateRPHPerf = function() {
      ReqPerHourStore.reset(); 
      rphChart.loadData(moment(), function() {
        rphChart.redraw();
      });
    }
    var toGoUpdate = (60-moment().minute())*60*1000;
    window.setTimeout(function() {
      updateRPHPerf();
      window.setInterval(updateRPHPerf, 3600000);
    }, toGoUpdate);

    var EvePerHourStore = new PerfomanceModel;
    var ephPerformance = new PerformanceView({model: EvePerHourStore, el: $("#perf_eph"), title: 'Events/Hour'});
    var updateEPHPerf = function() {
      EvePerHourStore.reset();      
       ephChart.loadData(moment(), function() {
        ephChart.redraw();
      });
    }
    window.setTimeout(function() {
      updateEPHPerf();
      window.setInterval(updateEPHPerf, 3600000);
    }, toGoUpdate);

    var updateFPHChart = function() {
       fphChart.loadData(moment(), function() {
        fphChart.redraw();
      });
    }
    window.setTimeout(function() {
      updateFPHChart();
      window.setInterval(updateFPHChart, 3600000);
    }, toGoUpdate);

    var EPHChart = function(opts, data_) {  
      //@TODO: Refactor to backbone     
      var data = data;    
      var datalength = 0;  
      var x = d3.scale.linear()
          .domain([0, 1])
          .range([0, opts.width]);

      var y = d3.scale.linear()
          .domain([0, opts.height])
          .rangeRound([0, opts.height]);
          

      var chart = null;

      this.addValue = function(c) {
        if (data) {
          data.shift();
          data.push({ time: (data[data.length-1].time)+1, value: c});      
        }
      }
      this.redraw = function(data_) {
        if (data_) setData(data_);        
        var rect = chart.selectAll("rect")
          .data(data, function(d) { return d.time; });
        rect.enter().insert("rect", "line")
            .attr("x", function(d, i) { return x(i + 1) - .5; })
            .attr("y", function(d) { return opts.height - y(d.value) - .5; })
            .attr("width", opts.width)
            .attr("height", function(d) { return y(d.value); })
          .transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i) - .5; });

        rect.transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i) - .5; });

        rect.exit().transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i - 1) - .5; })
            .remove();        
      }

      var create = function(data_) {         
        var title = opts.title || '';  
        if (data_) setData(data_);  
        $(opts.el).children('span').remove();
        chart = d3.select(opts.el).append("svg")
          .attr("class", "chart");
        chart.attr("width", (opts.width * data.length))
          .attr("height", opts.height);           
        chart.selectAll("rect")
          .data(data)
        .enter().append("rect")
          .attr("x", function(d, i) { return x(i) - .5; })
          .attr("y", function(d) { return opts.height - y(d.value) - .5; })          
          .attr("width", opts.width)
          .attr("height", function(d) { return y(d.value); })
          .attr("data-time", function(d) { return d.time; })
          .attr("data-value", function(d) { return (d.value * scaleFactor); })
          .style("fill", "rgb(10, 46, 78)");
          
        
        chart.append("line")
          .attr("x1", 0)
          .attr("x2", opts.width * data.length)
          .attr("y1", opts.height - .5)
          .attr("y2", opts.height - .5)
          .style("stroke", "#FFF");        
        var my = maxValue;
        if (scaleFactor < 3) my = my / 2;
        chart.append("line")
          .attr("x1", 45)
          .attr("x2", opts.width * data.length)
          .attr("y1", (-my) + opts.height)
          .attr("y2", (-my) + opts.height)
          .style("stroke", "rgb(255, 255, 32)");
        chart.append("svg:text")
          .attr("x", 5)
          .attr("y", ((-my) + opts.height) + 4.5)       
          .style("fill", "#00CC00") 
          .text(Math.round(maxValueData/2)); 
        chart.append("svg:text")
          .attr("x", 10)
          .attr("y", 18 )       
          .style("fill", "#00CC00") 
          .style("font-size", "0.9em") 
          .text(title+" (total: "+datalength+")"); 
      }
      this.create = create;
      this.getData = function() {
        return data;
      }
      var setData = function(data_) {
        data = data_;
      }
      this.setData = setData;
      var scaleFactor = 1;
      var maxValue = 0;
      var maxValueData = 0;
      var bars = opts.bars || 24;
      var startBar = null;      
      
      var loadData = function(now, callback) {
        var reqparams  = {'timestamp' : {'$gte' : moment().startOf('day').utc().valueOf() }, 'sort' : {'timestamp' : 1}};        
        if (opts.requestParameters) {
          for (var o in opts.requestParameters) {
            reqparams[o] = opts.requestParameters[o];
          }
        }        
        $.getJSON(opts.requestUrl, reqparams).success(function(rd){
          var initalRPHdata = [];
          datalength = rd.data.length;
          for (var i = 0, ix = (bars - 1); i <= ix; ++i) {
            initalRPHdata[i] = { time: i, value: 0 }
          }          
          for (var d in rd.data) {
            var t = null;
            switch (opts.startBar) {
              case 'currentMinute':
                t = moment(rd.data[d].timestamp).minute();
                break;
              default:
                t = moment(rd.data[d].timestamp).hour();
            }            
            initalRPHdata[t].value++;                      
            if (initalRPHdata[t].value > maxValue) {
              maxValue = initalRPHdata[t].value;
            }
          }
          maxValueData = maxValue;
          while (maxValue > opts.height) {
            scaleFactor++;
            maxValue = maxValue / scaleFactor;            
          }          
          if (scaleFactor > 1) {
            for (var i = 0, ix = initalRPHdata.length; i < ix; ++i) {
              if (initalRPHdata[i].value > 0) {
                var old = initalRPHdata[i].value;
                initalRPHdata[i].value = Math.round(initalRPHdata[i].value / scaleFactor);                
              }
            }  
          }              
          var fillNew = bars - startBar;              
          var testy1 = initalRPHdata.slice(0, startBar), testy2 = [];    
          for (var i =  -bars, ix = -startBar; i < ix; ++i) {      
            testy2.push({ time: i, value: 0 });
          }     
          var newData = testy2.reverse().concat(testy1);          
          setData(newData);          
          if (typeof(callback) === 'function') callback(newData);
        });
      }
      this.loadData = loadData;
      this.init = function(now, callback) {
        if (!opts.startBar) opts.startBar = 'currentHour';
        switch (opts.startBar) {
          case 'currentMinute':
            startBar = now.minute();
            break;
          default:
            startBar = now.hour();   
        }
        
        loadData(now, function() {
          create();
          if (typeof(callback) === 'function') callback();
        });
      }
    }
    
    var rpmChart = new EPHChart({
      el : '#chart_rpm',
      width : $('#chart_rpm').width()/60, 
      height : 100, 
      bars: 60,
      startBar: 'currentMinute',
      title : 'Requests per minute', 
      requestUrl : '/api/db/AdnoceVisit',
      requestParameters : {'timestamp' : {'$gte' : moment().startOf('hour').utc().valueOf() }, 'sort' : {'timestamp' : 1}}
    });
    var rphChart = new EPHChart({
      el : '#chart_rph',
      width :$('#chart_rph').width()/24, 
      height : 100, 
      bars: 24,
      startBar: 'currentHour',
      title : 'Requests per hour', 
      requestUrl : '/api/db/AdnoceVisit',
      requestParameters : {'timestamp' : {'$gte' : moment().startOf('day').utc().valueOf() }, 'sort' : {'timestamp' : 1}}
    });
    var ephChart = new EPHChart({
      el : '#chart_eph',
      width : $('#chart_rph').width()/24, 
      height : 100, 
      bars: 24,
      title : 'Events per hour', 
      requestUrl : '/api/db/AdnoceEvent',
      requestParameters : { 'adnocetype' : {'$gte' : 200 }}
    });
    
    var fphChart = new EPHChart({
      el : '#chart_fph',
      width : $('#chart_rph').width()/24, 
      height : 100, 
      bars: 24,
      title : 'Errors per hour', 
      requestUrl : '/api/db/AdnoceEvent',
      requestParameters : { 'adnocetype' : {'$gte' : 100 , '$lt' : 200 }}
    });
    $(document).ready(function() {
      rpmChart.init(moment(), function() {      
        rphChart.init(moment(), function() {          
          ephChart.init(moment(), function() {          
            fphChart.init(moment());  
          });          
        });      
      });    
    }); // document.ready
    
    
    
    
    


  </script>
  </body>
</html>
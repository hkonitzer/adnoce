<!doctype html>
<html>
  <head>
    <title>ADNOCE</title>
    <meta name="viewport" content="width=device-width">    
    <style type="text/css"></style>
    <link href="/css/main.css" rel="stylesheet" type="text/css"> 
    <% if (typeof(retrolook) === 'boolean' && retrolook === true) { %>
    <link href="/css/fonts.css" rel="stylesheet" type="text/css" media="screen"> 
    <% } %>
    <script src="<%=cdnurl%>/js/libs/jquery-1.9.1.min.js"></script>
    <script src="<%=cdnurl%>/js/libs/moment.min.js"></script>
    <script src="<%=cdnurl%>/js/libs/d3.v3.min.js"></script>    
    <script src="<%=cdnurl%>/js/libs/underscore-min.js"></script>
    <script src="<%=cdnurl%>/js/libs/backbone-min.js"></script>
    <script src="/js/main.js"></script>
    <script src="/socket.io/socket.io.js"></script>   
  </head>
  <body>
    <div id="server">
      <div style="float:left;">Server: <span id="serverstatus"></span></div>
      <span style="float:left;">&nbsp;/&nbsp;</span>
      <div style="float:left;">
        <span>Data recieved:&nbsp;</span>
        <span id="eventtype_1">Views: <span id="eventtypecontent_1">0</span></span>&nbsp;/&nbsp;
        <span id="eventtype_100">Errors: <span id="eventtypecontent_100">0</span></span>&nbsp;/&nbsp;
        <span id="eventtype_200">Events: <span id="eventtypecontent_200">0</span></span>
      </div>
    </div>
    <div style="clear:both;"></div>
    <div id="perf">
      <div id="perf_rpm" style="float:left;"></div>
      <span style="float:left;">&nbsp;/&nbsp;</span>
      <div id="perf_rph" style="float:left;"></div>
      <span style="float:left;">&nbsp;/&nbsp;</span>
      <div id="perf_eph" style="float:left;"></div>     
    </div>
    <div style="clear:both;"></div>    
    <div id="log"></div>
    <div id="chart_rpm" class="charts"></div>
    <div id="chart_rph" class="charts"></div>
    <div id="chart_eph" class="charts"></div>
    <div id="chart_fph" class="charts"></div>

    <script>

    <% // Socket IO Handling %>
    var trackingDataIO = io.connect();
    trackingDataIO.on('connect', function () {      
      $('#serverstatus').text('connected');      
    });
    trackingDataIO.on('disconnect', function () {      
      $('#serverstatus').text('disconnected');
    });
    trackingDataIO.socket.on('error', function (reason) {      
      $('#serverstatus').text('error: '+reason);
    });
    
    <%// Configuration %>
    var EVENTTYPENAMES = { 1 : 'Views: ', 100: 'Errors', 200 : 'Events' };
    var recievedEventTypes = { };
    for (var e in EVENTTYPENAMES) {
      recievedEventTypes[e] = 0;
    }
    var SHOWDATALOGLINE = true, MAXLOGLINES = null;
    if (location.search.length > 0) {
      var params = location.search.substring(1).split('&');
      for (var p = 0, pmax = params.length; p < pmax; ++p) {
        var param = params[p].split('=');
        switch (param[0]) {
          case 'datalogline':
            if (param[1] === 'false') {
              SHOWDATALOGLINE = false;   
            }
            break;
          case 'maxloglines':
            var max = parseInt(param[1], 10);
            if (!isNaN(max)) MAXLOGLINES = max;            
            break;
        }        
      }      
    }
    <% // Init Backbone Models & Views for log %>
    var LogLines = new LogLineList([]);    
    var Log = new LogView({model: LogLines, el: $("#log"), showMaxEntries: MAXLOGLINES, showDatalogline: SHOWDATALOGLINE});

    <%// Websocket Event Handler %>
    trackingDataIO.on('trackingdata', function (data) {
      var logEntry = new LogLine(data);
      LogLines.add(logEntry);
      recievedEventTypes[data.adnocetype]++;
      $('#eventtypecontent_'+data.adnocetype).text(recievedEventTypes[data.adnocetype]);
      switch (data.adnocetype) {
        case 200:
          EvePerHourStore.addRequest();
          break;
        default:
          ReqPerMinuteStore.addRequest();
          ReqPerHourStore.addRequest();        
      }
      
    });

    <%// Perfomance Calc %>        

    var ReqPerMinuteStore = new PerfomanceModel;
    var rpmPerformance = new PerformanceView({model: ReqPerMinuteStore, el: $("#perf_rpm"), title: 'Req/Min'});
    window.setInterval(function() {       
      rpmChart.addValue(ReqPerMinuteStore.get('reqcounter'));
      rpmChart.redraw();    
      ReqPerMinuteStore.reset(); 
    }, 60000);

    var ReqPerHourStore = new PerfomanceModel;
    var rphPerformance = new PerformanceView({model: ReqPerHourStore, el: $("#perf_rph"), title: 'Req/Hour'});
    var updateRPHPerf = function() {
      ReqPerHourStore.reset(); 
      rphChart.loadData(moment(), function() {
        rphChart.redraw();
      });
    }
    var toGoUpdate = (60-moment().minute())*60*1000;
    window.setTimeout(function() {
      updateRPHPerf();
      window.setInterval(updateRPHPerf, 3600000);
    }, toGoUpdate);

    var EvePerHourStore = new PerfomanceModel;
    var ephPerformance = new PerformanceView({model: EvePerHourStore, el: $("#perf_eph"), title: 'Events/Hour'});
    var updateEPHPerf = function() {
      EvePerHourStore.reset();      
       ephChart.loadData(moment(), function() {
        ephChart.redraw();
      });
    }
    window.setTimeout(function() {
      updateEPHPerf();
      window.setInterval(updateEPHPerf, 3600000);
    }, toGoUpdate);

    var updateFPHChart = function() {
       fphChart.loadData(moment(), function() {
        fphChart.redraw();
      });
    }
    window.setTimeout(function() {
      updateFPHChart();
      window.setInterval(updateFPHChart, 3600000);
    }, toGoUpdate);



    var RPHChart = function(opts, data_) {       
      var data = data;

      var x = d3.scale.linear()
          .domain([0, 1])
          .range([0, opts.width]);

      var y = d3.scale.linear()
          .domain([0, opts.height])
          .rangeRound([0, opts.height]);
          

      var chart = d3.select("#chart_rph").append("svg")
          .attr("class", "chart");

      this.addValue = function(c) {
        if (data) {
          data.shift();
          data.push({ time: (data[data.length-1].time)+1, value: c});      
        }
      }
      this.redraw = function(data_) {
        if (data_) setData(data_);
        var rect = chart.selectAll("rect")
          .data(data, function(d) { return d.time; });
        rect.enter().insert("rect", "line")
            .attr("x", function(d, i) { return x(i + 1) - .5; })
            .attr("y", function(d) { return opts.height - y(d.value) - .5; })
            .attr("width", opts.width)
            .attr("height", function(d) { return y(d.value); })
          .transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i) - .5; });

        rect.transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i) - .5; });

        rect.exit().transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i - 1) - .5; })
            .remove();        
      }

      var create = function(data_) {   
        if (data_) setData(data_);  
        chart.attr("width", opts.width * data.length - 1)
          .attr("height", opts.height);           
        chart.selectAll("rect")
          .data(data)
        .enter().append("rect")
          .attr("x", function(d, i) { return x(i) - .5; })
          .attr("y", function(d) { return opts.height - y(d.value) - .5; })          
          .attr("width", opts.width)
          .attr("height", function(d) { return y(d.value); })
          .attr("data-hour", function(d) { return d.time; });
        
        chart.append("line")
          .attr("x1", 0)
          .attr("x2", opts.width * data.length)
          .attr("y1", opts.height - .5)
          .attr("y2", opts.height - .5)
          .style("stroke", "#000");
        chart.append("svg:text")
          .attr("x", 50 / 2)
          .attr("y", 35 )       
          .style("fill", "#00CC00") 
          .text("Requests per hour"); 
      }
      this.create = create;
      this.getData = function() {
        return data;
      }
      var setData = function(data_) {
        data = data_;
      }
      this.setData = setData;
      var scaleFactor = 1;
      var loadData = function(now, callback) {
        $.getJSON('/api/db/AdnoceVisit', {'timestamp' : {'$gte' : moment().startOf('day').utc().valueOf() }, 'sort' : {'timestamp' : 1}}).success(function(rd){
          var initalRPHdata = [];
          for (var i = 0, ix = 23; i <= ix; ++i) {
            initalRPHdata[i] = { time: i, value: 0 }
          }
          var maxValue = 0;
          for (var d in rd.data) {
            var h = moment(rd.data[d].timestamp).hour();
            initalRPHdata[h].value++;            
            if (initalRPHdata[h].value > maxValue) maxValue = initalRPHdata[h].value;            
          }
          while (maxValue > 200) {
            scaleFactor++;
            maxValue = maxValue / scaleFactor;            
          }          
          if (scaleFactor > 1) {
            for (var i = 0, ix = initalRPHdata.length; i < ix; ++i) {
              if (initalRPHdata[i].value > 0) {
                var old = initalRPHdata[i].value;
                initalRPHdata[i].value = Math.round(initalRPHdata[i].value / scaleFactor);                
              }
            }  
          }
          var currentHour = now.hour();      
          var fillNew = 24 - currentHour;              
          var testy1 = initalRPHdata.slice(0, currentHour), testy2 = [];    
          for (var i =  -24, ix = -currentHour; i < ix; ++i) {      
            testy2.push({ time: i, value: 0 });
          }     
          var newData = testy2.reverse().concat(testy1);
          setData(newData);
          if (typeof(callback) === 'function') callback(newData);
        });
      }
      this.loadData = loadData;
      this.init = function(now) {
        loadData(now, function() {
          create();
        })
      }
    }
    var RPMChart = function(opts, data) {
      //@TODO: Refactor to backbone
      var data = data;

      var x = d3.scale.linear()
          .domain([0, 1])
          .range([0, opts.width]);

      var y = d3.scale.linear()
          .domain([0, 100])
          .rangeRound([0, opts.height]);

      var chart = d3.select("#chart_rpm").append("svg")
          .attr("class", "chart");
          
      this.addValue = function(c) {
        if (data) {
          data.shift();
          data.push({ time: (data[data.length-1].time)+1, value: c});      
        }
      }
      this.redraw = function(data_) {
        if (data_) setData(data_);
        var rect = chart.selectAll("rect")
          .data(data, function(d) { return d.time; });
        rect.enter().insert("rect", "line")
            .attr("x", function(d, i) { return x(i + 1) - .5; })
            .attr("y", function(d) { return opts.height - y(d.value) - .5; })
            .attr("width", opts.width)
            .attr("height", function(d) { return y(d.value); })
          .transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i) - .5; });

        rect.transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i) - .5; });

        rect.exit().transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i - 1) - .5; })
            .remove();
      }

      var create = function(data_) {     
        if (data_) setData(data_);           
        chart = chart.attr("width", opts.width * data.length - 1)
          .attr("height", opts.height);
        chart.selectAll("rect")
          .data(data)
        .enter().append("rect")
          .attr("x", function(d, i) { return x(i) - .5; })
          .attr("y", function(d) { return opts.height - y(d.value) - .5; })
          .attr("width", opts.width)
          .attr("height", function(d) { return y(d.value); });
          
        chart.append("line")
          .attr("x1", 0)
          .attr("x2", opts.width * data.length)
          .attr("y1", opts.height - .5)
          .attr("y2", opts.height - .5)
          .style("stroke", "#000");
        chart.append("svg:text")
          .attr("x", 50 / 2)
          .attr("y", 35 )       
          .style("fill", "#00CC00") 
          .text("Requests per minute"); 
      }
      this.create = create;
      this.getData = function() {
        return data;
      }
      var setData = function(data_) {
        data = data_;
      }
      this.setData = setData;
      var scaleFactor = 1;
      var loadData = function(now, callback) {
        $.getJSON('/api/db/AdnoceVisit', {'timestamp' : {'$gte' : moment().startOf('hour').utc().valueOf() }, 'sort' : {'timestamp' : 1}}).success(function(rd){
          var initalRPMdata = [];
          for (var i = 0, ix = 60; i < ix; ++i) {
            initalRPMdata[i] = { time: i, value: 0 }
          }
          var maxValue = 0;
          for (var d in rd.data) {
            var min = moment(rd.data[d].timestamp).minute();
            initalRPMdata[min].value++;
            if (initalRPMdata[min].value > maxValue) maxValue = initalRPMdata[min].value;
          }
          while (maxValue > opts.height) {
            scaleFactor++;
            maxValue = maxValue / scaleFactor;            
          }          
          if (scaleFactor > 1) {
            for (var i = 0, ix = initalRPMdata.length; i < ix; ++i) {
              if (initalRPMdata[i].value > 0) {
                var old = initalRPMdata[i].value;
                initalRPMdata[i].value = Math.round(initalRPMdata[i].value / scaleFactor);                
              }
            }  
          }
          var currentMinute = now.minute();  
          var fillNew = 60 - currentMinute;    
          var testy1 = initalRPMdata.slice(0, currentMinute), testy2 = [];    
          for (var i =  -60, ix = -currentMinute; i < ix; ++i) {      
            testy2.push({ time: i, value: 0 });
          }           
          var newData = testy2.reverse().concat(testy1);
          setData(newData);
          if (typeof(callback) === 'function') callback(newData);
        });
      }
      this.loadData = loadData;
      this.init = function(now) {
        loadData(now, function() {
          create();
        })
      }
      
    }

    var EPHChart = function(opts, data_) {       
      var data = data;      
      var x = d3.scale.linear()
          .domain([0, 1])
          .range([0, opts.width]);

      var y = d3.scale.linear()
          .domain([0, opts.height])
          .rangeRound([0, opts.height]);
          

      var chart = d3.select(opts.el).append("svg")
          .attr("class", "chart");

      this.addValue = function(c) {
        if (data) {
          data.shift();
          data.push({ time: (data[data.length-1].time)+1, value: c});      
        }
      }
      this.redraw = function(data_) {
        if (data_) setData(data_);
        var rect = chart.selectAll("rect")
          .data(data, function(d) { return d.time; });
        rect.enter().insert("rect", "line")
            .attr("x", function(d, i) { return x(i + 1) - .5; })
            .attr("y", function(d) { return opts.height - y(d.value) - .5; })
            .attr("width", opts.width)
            .attr("height", function(d) { return y(d.value); })
          .transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i) - .5; });

        rect.transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i) - .5; });

        rect.exit().transition()
            .duration(1000)
            .attr("x", function(d, i) { return x(i - 1) - .5; })
            .remove();        
      }

      var create = function(data_) { 
        var title = opts.title || '';  
        if (data_) setData(data_);  
        chart.attr("width", opts.width * data.length - 1)
          .attr("height", opts.height);           
        chart.selectAll("rect")
          .data(data)
        .enter().append("rect")
          .attr("x", function(d, i) { return x(i) - .5; })
          .attr("y", function(d) { return opts.height - y(d.value) - .5; })          
          .attr("width", opts.width)
          .attr("height", function(d) { return y(d.value); })
          .attr("data-hour", function(d) { return d.time; });
        
        chart.append("line")
          .attr("x1", 0)
          .attr("x2", opts.width * data.length)
          .attr("y1", opts.height - .5)
          .attr("y2", opts.height - .5)
          .style("stroke", "#000");
        chart.append("svg:text")
          .attr("x", 50 / 2)
          .attr("y", 35 )       
          .style("fill", "#00CC00") 
          .text(title); 
      }
      this.create = create;
      this.getData = function() {
        return data;
      }
      var setData = function(data_) {
        data = data_;
      }
      this.setData = setData;
      var scaleFactor = 1;
      var loadData = function(now, callback) {
        var reqparams  = {'timestamp' : {'$gte' : moment().startOf('day').utc().valueOf() }, 'sort' : {'timestamp' : 1}};        
        if (opts.requestParameters) {
          for (var o in opts.requestParameters) {
            reqparams[o] = opts.requestParameters[o];
          }
        }        
        $.getJSON('/api/db/AdnoceEvent', reqparams).success(function(rd){
          var initalRPHdata = [];
          for (var i = 0, ix = 23; i <= ix; ++i) {
            initalRPHdata[i] = { time: i, value: 0 }
          }
          var maxValue = 0;
          for (var d in rd.data) {
            var h = moment(rd.data[d].timestamp).hour();
            initalRPHdata[h].value++;            
            if (initalRPHdata[h].value > maxValue) maxValue = initalRPHdata[h].value;            
          }
          while (maxValue > opts.height) {
            scaleFactor++;
            maxValue = maxValue / scaleFactor;            
          }          
          
          if (scaleFactor > 1) {
            for (var i = 0, ix = initalRPHdata.length; i < ix; ++i) {
              if (initalRPHdata[i].value > 0) {
                var old = initalRPHdata[i].value;
                initalRPHdata[i].value = Math.round(initalRPHdata[i].value / scaleFactor);                
              }
            }  
          }
          var currentHour = now.hour();      
          var fillNew = 24 - currentHour;              
          var testy1 = initalRPHdata.slice(0, currentHour), testy2 = [];    
          for (var i =  -24, ix = -currentHour; i < ix; ++i) {      
            testy2.push({ time: i, value: 0 });
          }     
          var newData = testy2.reverse().concat(testy1);          
          setData(newData);          
          if (typeof(callback) === 'function') callback(newData);
        });
      }
      this.loadData = loadData;
      this.init = function(now) {
        loadData(now, function() {
          create();
        })
      }
    }

    var rpmChart = new RPMChart({width : Math.round(($('#chart_rpm').width()-30)/60), height : 200});
    var rphChart = new RPHChart({width : Math.round(($('#chart_rph').width()-30)/24), height : 100});
    var ephChart = new EPHChart({
      el : '#chart_eph',
      width : Math.round(($('#chart_eph').width()-30)/24), 
      height : 100, 
      title : 'Events per hour', 
      requestParameters : { 'adnocetype' : { '$gte' : 200 }}
    });
    var fphChart = new EPHChart({
      el : '#chart_fph',
      width : Math.round(($('#chart_fph').width()-30)/24), 
      height : 100, 
      title : 'Errors per hour', 
      requestParameters : { 'adnocetype' : { '$gte' : 100 , '$lt' : 200 }}
    });

    rphChart.init(moment());
    rpmChart.init(moment());
    ephChart.init(moment());
    fphChart.init(moment());
    
    


  </script>
  </body>
</html>